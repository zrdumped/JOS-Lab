/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num, user)						\
.text;    \
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps;        \
.data;                     \
    .long name, num, user

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num, user)					\
.text;    \
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps;            \
.data;         \
  .long name, num, user


/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
 // Trap numbers
 // These are processor defined:
.data
  .globl entry_data
  entry_data:
.text
 TRAPHANDLER_NOEC( ENTRY_DIVIDE  , T_DIVIDE ,0)  /*  0 divide error*/
 TRAPHANDLER_NOEC( ENTRY_DEBUG   , T_DEBUG  ,0)  /*  1 debug exception*/
 TRAPHANDLER_NOEC( ENTRY_NMI     , T_NMI    ,0)  /*  2 non-maskable interrupt*/
 TRAPHANDLER_NOEC( ENTRY_BRKPT   , T_BRKPT  ,3)  /*  3 breakpoint*/
 TRAPHANDLER_NOEC( ENTRY_OFLOW   , T_OFLOW  ,3)  /*  4 overflow*/
 TRAPHANDLER_NOEC( ENTRY_BOUND   , T_BOUND  ,3)  /*  5 bounds check*/
 TRAPHANDLER_NOEC( ENTRY_ILLOP   , T_ILLOP  ,0)  /*  6 illegal opcode*/
 TRAPHANDLER_NOEC( ENTRY_DEVICE  , T_DEVICE ,0)  /*  7 device not available*/
 TRAPHANDLER     ( ENTRY_DBLFLT  , T_DBLFLT ,0)  /*  8 double fault*/
 /*TRAPHANDLER_NOEC( ENTRY_COPROC  , T_COPROC ,0)*/  /*  9 reserved (not generated by recent processors)*/
 TRAPHANDLER     ( ENTRY_TSS     , T_TSS    ,0)  /* 10 invalid task switch segment*/
 TRAPHANDLER     ( ENTRY_SEGNP   , T_SEGNP  ,0)  /* 11 segment not present*/
 TRAPHANDLER     ( ENTRY_STACK   , T_STACK  ,0)  /* 12 stack exception*/
 TRAPHANDLER     ( ENTRY_GPFLT   , T_GPFLT  ,0)  /* 13 general protection fault*/
 TRAPHANDLER     ( ENTRY_PGFLT   , T_PGFLT  ,0)  /* 14 page fault*/
 /*TRAPHANDLER_NOEC( ENTRY_RES     , T_RES    ,0)*/  /* 15 reserved*/
 TRAPHANDLER_NOEC( ENTRY_FPERR   , T_FPERR  ,0)  /* 16 floating point error*/
 TRAPHANDLER_NOEC( ENTRY_ALIGN   , T_ALIGN  ,0)  /* 17 aligment check*/
 TRAPHANDLER_NOEC( ENTRY_MCHK    , T_MCHK   ,0)  /* 18 machine check*/
 TRAPHANDLER_NOEC( ENTRY_SIMDERR , T_SIMDERR,0)  /* 19 SIMD floating point error*/

TRAPHANDLER_NOEC( ENTRY_IRQ_TIMER   , IRQ_OFFSET+IRQ_TIMER   , 0)  /*  0*/
TRAPHANDLER_NOEC( ENTRY_IRQ_KBD     , IRQ_OFFSET+IRQ_KBD     , 0)  /*  1*/
TRAPHANDLER_NOEC( ENTRY_IRQ_2       , IRQ_OFFSET+    2       , 0)  /*  2*/
TRAPHANDLER_NOEC( ENTRY_IRQ_3       , IRQ_OFFSET+    3       , 0)  /*  3*/
TRAPHANDLER_NOEC( ENTRY_IRQ_SERIAL  , IRQ_OFFSET+IRQ_SERIAL  , 0)  /*  4*/
TRAPHANDLER_NOEC( ENTRY_IRQ_5       , IRQ_OFFSET+    5       , 0)  /*  5*/
TRAPHANDLER_NOEC( ENTRY_IRQ_6       , IRQ_OFFSET+    6       , 0)  /*  6*/
TRAPHANDLER_NOEC( ENTRY_IRQ_SPURIOUS, IRQ_OFFSET+IRQ_SPURIOUS, 0)  /*  7*/
TRAPHANDLER_NOEC( ENTRY_IRQ_8       , IRQ_OFFSET+    8       , 0)  /*  8*/
TRAPHANDLER_NOEC( ENTRY_IRQ_9       , IRQ_OFFSET+    9       , 0)  /*  9*/
TRAPHANDLER_NOEC( ENTRY_IRQ_10      , IRQ_OFFSET+    10      , 0)  /* 10*/
TRAPHANDLER_NOEC( ENTRY_IRQ_11      , IRQ_OFFSET+    11      , 0)  /* 11*/
TRAPHANDLER_NOEC( ENTRY_IRQ_12      , IRQ_OFFSET+    12      , 0)  /* 12*/
TRAPHANDLER_NOEC( ENTRY_IRQ_13      , IRQ_OFFSET+    13      , 0)  /* 13*/
TRAPHANDLER_NOEC( ENTRY_IRQ_IDE     , IRQ_OFFSET+IRQ_IDE     , 0)  /* 14*/
TRAPHANDLER_NOEC( ENTRY_IRQ_15      , IRQ_OFFSET+    15      , 0)  /* 15*/
TRAPHANDLER_NOEC( ENTRY_IRQ_ERROR   , IRQ_OFFSET+IRQ_ERROR   , 0)  /* 19*/

 TRAPHANDLER_NOEC( ENTRY_SYSCALL , T_SYSCALL,3)  /* 48 syscall*/
.data
  .long 0,0,0



.globl sysenter_handler;
.type sysenter_handler, @function;
.align 2;
sysenter_handler:
/*
 * Lab 3: Your code here for system call handling
 */
 pushw $0
 pushw $GD_UD | 3
 pushl %ebp
 pushfl
 pushw $0
 pushw $GD_UT | 3
 pushl %esi
 pushl $0
 pushl $0
 pushw $0
 pushw %ds
 pushw $0
 pushw %es
 pushal
 pushl %esp
 pushl 0x4(%ebp)
 pushl %edi
 pushl %ebx
 pushl %ecx
 pushl %edx
 pushl %eax
 call syscall_wrapper
 movl %ebp, %ecx
 movl %esi, %edx
 sti
 sysexit

/*
 * Lab 3: Your code here for _alltraps
 */
 _alltraps:
  pushw $0
  pushw %ds
  pushw $0
  pushw %es
  pushal
  pushw $GD_KD
  popw %ds
  pushw $GD_KD
  popw %es
  pushl %esp
  call trap
